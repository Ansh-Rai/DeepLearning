{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ansh-Rai/DeepLearning/blob/main/DeepLearning/MPNeuron\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pW1m_aayCwAN"
      },
      "outputs": [],
      "source": [
        "import sklearn.datasets\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4YTx4-wyDseZ"
      },
      "outputs": [],
      "source": [
        "breast_cancer=sklearn.datasets.load_breast_cancer()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nwgi4a1ED2eC"
      },
      "outputs": [],
      "source": [
        "x=breast_cancer.data\n",
        "y=breast_cancer.target"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OWIYiDxlEWK8",
        "outputId": "c2f17a25-e793-42c8-e668-1ac4bd72e2ee"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[1.799e+01 1.038e+01 1.228e+02 ... 2.654e-01 4.601e-01 1.189e-01]\n",
            " [2.057e+01 1.777e+01 1.329e+02 ... 1.860e-01 2.750e-01 8.902e-02]\n",
            " [1.969e+01 2.125e+01 1.300e+02 ... 2.430e-01 3.613e-01 8.758e-02]\n",
            " ...\n",
            " [1.660e+01 2.808e+01 1.083e+02 ... 1.418e-01 2.218e-01 7.820e-02]\n",
            " [2.060e+01 2.933e+01 1.401e+02 ... 2.650e-01 4.087e-01 1.240e-01]\n",
            " [7.760e+00 2.454e+01 4.792e+01 ... 0.000e+00 2.871e-01 7.039e-02]]\n",
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n",
            " 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n",
            " 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n",
            " 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n",
            " 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n",
            " 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n",
            " 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n",
            " 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n",
            " 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n",
            " 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n",
            " 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 0 0 0 0 0 0 1]\n"
          ]
        }
      ],
      "source": [
        "print(x)\n",
        "print(y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gydnnuQDEYyd",
        "outputId": "af668549-b6da-4482-f280-7a660a152377"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(569, 30) (569,)\n"
          ]
        }
      ],
      "source": [
        "print(x.shape,y.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6U_0UTutEhBK"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B4E4v9dqEtM2"
      },
      "outputs": [],
      "source": [
        "data=pd.DataFrame(breast_cancer.data,columns=breast_cancer.feature_names)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mu3PCKYNE1Xr"
      },
      "outputs": [],
      "source": [
        "data['class']=breast_cancer.target #adding an collumns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "RBH0VTufE7vt",
        "outputId": "db4e0d33-1510-4a4e-a3cd-c58a663e6ff9"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-0589f913-4da0-4f88-a66e-bba338f7e406\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>0.07871</td>\n",
              "      <td>...</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>0.05667</td>\n",
              "      <td>...</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>0.05999</td>\n",
              "      <td>...</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>0.09744</td>\n",
              "      <td>...</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>0.05883</td>\n",
              "      <td>...</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0589f913-4da0-4f88-a66e-bba338f7e406')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0589f913-4da0-4f88-a66e-bba338f7e406 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0589f913-4da0-4f88-a66e-bba338f7e406');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-db2af0d6-c7fe-41a3-9e58-06dad2ff4513\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db2af0d6-c7fe-41a3-9e58-06dad2ff4513')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-db2af0d6-c7fe-41a3-9e58-06dad2ff4513 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
              "0        17.99         10.38          122.80     1001.0          0.11840   \n",
              "1        20.57         17.77          132.90     1326.0          0.08474   \n",
              "2        19.69         21.25          130.00     1203.0          0.10960   \n",
              "3        11.42         20.38           77.58      386.1          0.14250   \n",
              "4        20.29         14.34          135.10     1297.0          0.10030   \n",
              "\n",
              "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
              "0           0.27760          0.3001              0.14710         0.2419   \n",
              "1           0.07864          0.0869              0.07017         0.1812   \n",
              "2           0.15990          0.1974              0.12790         0.2069   \n",
              "3           0.28390          0.2414              0.10520         0.2597   \n",
              "4           0.13280          0.1980              0.10430         0.1809   \n",
              "\n",
              "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
              "0                 0.07871  ...          17.33           184.60      2019.0   \n",
              "1                 0.05667  ...          23.41           158.80      1956.0   \n",
              "2                 0.05999  ...          25.53           152.50      1709.0   \n",
              "3                 0.09744  ...          26.50            98.87       567.7   \n",
              "4                 0.05883  ...          16.67           152.20      1575.0   \n",
              "\n",
              "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
              "0            0.1622             0.6656           0.7119                0.2654   \n",
              "1            0.1238             0.1866           0.2416                0.1860   \n",
              "2            0.1444             0.4245           0.4504                0.2430   \n",
              "3            0.2098             0.8663           0.6869                0.2575   \n",
              "4            0.1374             0.2050           0.4000                0.1625   \n",
              "\n",
              "   worst symmetry  worst fractal dimension  class  \n",
              "0          0.4601                  0.11890      0  \n",
              "1          0.2750                  0.08902      0  \n",
              "2          0.3613                  0.08758      0  \n",
              "3          0.6638                  0.17300      0  \n",
              "4          0.2364                  0.07678      0  \n",
              "\n",
              "[5 rows x 31 columns]"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "j9b-oziRFKQ0",
        "outputId": "396ffd8c-0145-4ddf-bf96-5935be51fd64"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-dc9f9191-ab08-43d5-9dc8-d7ea9b65e193\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>14.127292</td>\n",
              "      <td>19.289649</td>\n",
              "      <td>91.969033</td>\n",
              "      <td>654.889104</td>\n",
              "      <td>0.096360</td>\n",
              "      <td>0.104341</td>\n",
              "      <td>0.088799</td>\n",
              "      <td>0.048919</td>\n",
              "      <td>0.181162</td>\n",
              "      <td>0.062798</td>\n",
              "      <td>...</td>\n",
              "      <td>25.677223</td>\n",
              "      <td>107.261213</td>\n",
              "      <td>880.583128</td>\n",
              "      <td>0.132369</td>\n",
              "      <td>0.254265</td>\n",
              "      <td>0.272188</td>\n",
              "      <td>0.114606</td>\n",
              "      <td>0.290076</td>\n",
              "      <td>0.083946</td>\n",
              "      <td>0.627417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.524049</td>\n",
              "      <td>4.301036</td>\n",
              "      <td>24.298981</td>\n",
              "      <td>351.914129</td>\n",
              "      <td>0.014064</td>\n",
              "      <td>0.052813</td>\n",
              "      <td>0.079720</td>\n",
              "      <td>0.038803</td>\n",
              "      <td>0.027414</td>\n",
              "      <td>0.007060</td>\n",
              "      <td>...</td>\n",
              "      <td>6.146258</td>\n",
              "      <td>33.602542</td>\n",
              "      <td>569.356993</td>\n",
              "      <td>0.022832</td>\n",
              "      <td>0.157336</td>\n",
              "      <td>0.208624</td>\n",
              "      <td>0.065732</td>\n",
              "      <td>0.061867</td>\n",
              "      <td>0.018061</td>\n",
              "      <td>0.483918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.981000</td>\n",
              "      <td>9.710000</td>\n",
              "      <td>43.790000</td>\n",
              "      <td>143.500000</td>\n",
              "      <td>0.052630</td>\n",
              "      <td>0.019380</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.106000</td>\n",
              "      <td>0.049960</td>\n",
              "      <td>...</td>\n",
              "      <td>12.020000</td>\n",
              "      <td>50.410000</td>\n",
              "      <td>185.200000</td>\n",
              "      <td>0.071170</td>\n",
              "      <td>0.027290</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156500</td>\n",
              "      <td>0.055040</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>11.700000</td>\n",
              "      <td>16.170000</td>\n",
              "      <td>75.170000</td>\n",
              "      <td>420.300000</td>\n",
              "      <td>0.086370</td>\n",
              "      <td>0.064920</td>\n",
              "      <td>0.029560</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>0.161900</td>\n",
              "      <td>0.057700</td>\n",
              "      <td>...</td>\n",
              "      <td>21.080000</td>\n",
              "      <td>84.110000</td>\n",
              "      <td>515.300000</td>\n",
              "      <td>0.116600</td>\n",
              "      <td>0.147200</td>\n",
              "      <td>0.114500</td>\n",
              "      <td>0.064930</td>\n",
              "      <td>0.250400</td>\n",
              "      <td>0.071460</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>13.370000</td>\n",
              "      <td>18.840000</td>\n",
              "      <td>86.240000</td>\n",
              "      <td>551.100000</td>\n",
              "      <td>0.095870</td>\n",
              "      <td>0.092630</td>\n",
              "      <td>0.061540</td>\n",
              "      <td>0.033500</td>\n",
              "      <td>0.179200</td>\n",
              "      <td>0.061540</td>\n",
              "      <td>...</td>\n",
              "      <td>25.410000</td>\n",
              "      <td>97.660000</td>\n",
              "      <td>686.500000</td>\n",
              "      <td>0.131300</td>\n",
              "      <td>0.211900</td>\n",
              "      <td>0.226700</td>\n",
              "      <td>0.099930</td>\n",
              "      <td>0.282200</td>\n",
              "      <td>0.080040</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>15.780000</td>\n",
              "      <td>21.800000</td>\n",
              "      <td>104.100000</td>\n",
              "      <td>782.700000</td>\n",
              "      <td>0.105300</td>\n",
              "      <td>0.130400</td>\n",
              "      <td>0.130700</td>\n",
              "      <td>0.074000</td>\n",
              "      <td>0.195700</td>\n",
              "      <td>0.066120</td>\n",
              "      <td>...</td>\n",
              "      <td>29.720000</td>\n",
              "      <td>125.400000</td>\n",
              "      <td>1084.000000</td>\n",
              "      <td>0.146000</td>\n",
              "      <td>0.339100</td>\n",
              "      <td>0.382900</td>\n",
              "      <td>0.161400</td>\n",
              "      <td>0.317900</td>\n",
              "      <td>0.092080</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>28.110000</td>\n",
              "      <td>39.280000</td>\n",
              "      <td>188.500000</td>\n",
              "      <td>2501.000000</td>\n",
              "      <td>0.163400</td>\n",
              "      <td>0.345400</td>\n",
              "      <td>0.426800</td>\n",
              "      <td>0.201200</td>\n",
              "      <td>0.304000</td>\n",
              "      <td>0.097440</td>\n",
              "      <td>...</td>\n",
              "      <td>49.540000</td>\n",
              "      <td>251.200000</td>\n",
              "      <td>4254.000000</td>\n",
              "      <td>0.222600</td>\n",
              "      <td>1.058000</td>\n",
              "      <td>1.252000</td>\n",
              "      <td>0.291000</td>\n",
              "      <td>0.663800</td>\n",
              "      <td>0.207500</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc9f9191-ab08-43d5-9dc8-d7ea9b65e193')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dc9f9191-ab08-43d5-9dc8-d7ea9b65e193 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dc9f9191-ab08-43d5-9dc8-d7ea9b65e193');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0e4aa3ac-4658-49ec-89bd-f4e61f48a49b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e4aa3ac-4658-49ec-89bd-f4e61f48a49b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0e4aa3ac-4658-49ec-89bd-f4e61f48a49b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       mean radius  mean texture  mean perimeter    mean area  \\\n",
              "count   569.000000    569.000000      569.000000   569.000000   \n",
              "mean     14.127292     19.289649       91.969033   654.889104   \n",
              "std       3.524049      4.301036       24.298981   351.914129   \n",
              "min       6.981000      9.710000       43.790000   143.500000   \n",
              "25%      11.700000     16.170000       75.170000   420.300000   \n",
              "50%      13.370000     18.840000       86.240000   551.100000   \n",
              "75%      15.780000     21.800000      104.100000   782.700000   \n",
              "max      28.110000     39.280000      188.500000  2501.000000   \n",
              "\n",
              "       mean smoothness  mean compactness  mean concavity  mean concave points  \\\n",
              "count       569.000000        569.000000      569.000000           569.000000   \n",
              "mean          0.096360          0.104341        0.088799             0.048919   \n",
              "std           0.014064          0.052813        0.079720             0.038803   \n",
              "min           0.052630          0.019380        0.000000             0.000000   \n",
              "25%           0.086370          0.064920        0.029560             0.020310   \n",
              "50%           0.095870          0.092630        0.061540             0.033500   \n",
              "75%           0.105300          0.130400        0.130700             0.074000   \n",
              "max           0.163400          0.345400        0.426800             0.201200   \n",
              "\n",
              "       mean symmetry  mean fractal dimension  ...  worst texture  \\\n",
              "count     569.000000              569.000000  ...     569.000000   \n",
              "mean        0.181162                0.062798  ...      25.677223   \n",
              "std         0.027414                0.007060  ...       6.146258   \n",
              "min         0.106000                0.049960  ...      12.020000   \n",
              "25%         0.161900                0.057700  ...      21.080000   \n",
              "50%         0.179200                0.061540  ...      25.410000   \n",
              "75%         0.195700                0.066120  ...      29.720000   \n",
              "max         0.304000                0.097440  ...      49.540000   \n",
              "\n",
              "       worst perimeter   worst area  worst smoothness  worst compactness  \\\n",
              "count       569.000000   569.000000        569.000000         569.000000   \n",
              "mean        107.261213   880.583128          0.132369           0.254265   \n",
              "std          33.602542   569.356993          0.022832           0.157336   \n",
              "min          50.410000   185.200000          0.071170           0.027290   \n",
              "25%          84.110000   515.300000          0.116600           0.147200   \n",
              "50%          97.660000   686.500000          0.131300           0.211900   \n",
              "75%         125.400000  1084.000000          0.146000           0.339100   \n",
              "max         251.200000  4254.000000          0.222600           1.058000   \n",
              "\n",
              "       worst concavity  worst concave points  worst symmetry  \\\n",
              "count       569.000000            569.000000      569.000000   \n",
              "mean          0.272188              0.114606        0.290076   \n",
              "std           0.208624              0.065732        0.061867   \n",
              "min           0.000000              0.000000        0.156500   \n",
              "25%           0.114500              0.064930        0.250400   \n",
              "50%           0.226700              0.099930        0.282200   \n",
              "75%           0.382900              0.161400        0.317900   \n",
              "max           1.252000              0.291000        0.663800   \n",
              "\n",
              "       worst fractal dimension       class  \n",
              "count               569.000000  569.000000  \n",
              "mean                  0.083946    0.627417  \n",
              "std                   0.018061    0.483918  \n",
              "min                   0.055040    0.000000  \n",
              "25%                   0.071460    0.000000  \n",
              "50%                   0.080040    1.000000  \n",
              "75%                   0.092080    1.000000  \n",
              "max                   0.207500    1.000000  \n",
              "\n",
              "[8 rows x 31 columns]"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FBeA-XGnHeu4",
        "outputId": "da4d8e40-c4b9-4a96-8766-be8cc47cbea1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "class\n",
            "1    357\n",
            "0    212\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(data['class'].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HD1VZedLH6Hd",
        "outputId": "95f5d76b-a176-4238-e29b-720b32a169cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['malignant' 'benign']\n"
          ]
        }
      ],
      "source": [
        "print(breast_cancer.target_names)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "id": "QpXnHsYrH_zY",
        "outputId": "78c68a42-9a80-4cda-9c48-9bd8c12722f4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-8b97d5b0-d891-449a-9941-bb67699bcd0e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean radius</th>\n",
              "      <th>mean texture</th>\n",
              "      <th>mean perimeter</th>\n",
              "      <th>mean area</th>\n",
              "      <th>mean smoothness</th>\n",
              "      <th>mean compactness</th>\n",
              "      <th>mean concavity</th>\n",
              "      <th>mean concave points</th>\n",
              "      <th>mean symmetry</th>\n",
              "      <th>mean fractal dimension</th>\n",
              "      <th>...</th>\n",
              "      <th>worst radius</th>\n",
              "      <th>worst texture</th>\n",
              "      <th>worst perimeter</th>\n",
              "      <th>worst area</th>\n",
              "      <th>worst smoothness</th>\n",
              "      <th>worst compactness</th>\n",
              "      <th>worst concavity</th>\n",
              "      <th>worst concave points</th>\n",
              "      <th>worst symmetry</th>\n",
              "      <th>worst fractal dimension</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>class</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>17.462830</td>\n",
              "      <td>21.604906</td>\n",
              "      <td>115.365377</td>\n",
              "      <td>978.376415</td>\n",
              "      <td>0.102898</td>\n",
              "      <td>0.145188</td>\n",
              "      <td>0.160775</td>\n",
              "      <td>0.087990</td>\n",
              "      <td>0.192909</td>\n",
              "      <td>0.062680</td>\n",
              "      <td>...</td>\n",
              "      <td>21.134811</td>\n",
              "      <td>29.318208</td>\n",
              "      <td>141.370330</td>\n",
              "      <td>1422.286321</td>\n",
              "      <td>0.144845</td>\n",
              "      <td>0.374824</td>\n",
              "      <td>0.450606</td>\n",
              "      <td>0.182237</td>\n",
              "      <td>0.323468</td>\n",
              "      <td>0.091530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12.146524</td>\n",
              "      <td>17.914762</td>\n",
              "      <td>78.075406</td>\n",
              "      <td>462.790196</td>\n",
              "      <td>0.092478</td>\n",
              "      <td>0.080085</td>\n",
              "      <td>0.046058</td>\n",
              "      <td>0.025717</td>\n",
              "      <td>0.174186</td>\n",
              "      <td>0.062867</td>\n",
              "      <td>...</td>\n",
              "      <td>13.379801</td>\n",
              "      <td>23.515070</td>\n",
              "      <td>87.005938</td>\n",
              "      <td>558.899440</td>\n",
              "      <td>0.124959</td>\n",
              "      <td>0.182673</td>\n",
              "      <td>0.166238</td>\n",
              "      <td>0.074444</td>\n",
              "      <td>0.270246</td>\n",
              "      <td>0.079442</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b97d5b0-d891-449a-9941-bb67699bcd0e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b97d5b0-d891-449a-9941-bb67699bcd0e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b97d5b0-d891-449a-9941-bb67699bcd0e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cd77242d-e079-469a-b35a-868168eeea0d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cd77242d-e079-469a-b35a-868168eeea0d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cd77242d-e079-469a-b35a-868168eeea0d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       mean radius  mean texture  mean perimeter   mean area  mean smoothness  \\\n",
              "class                                                                           \n",
              "0        17.462830     21.604906      115.365377  978.376415         0.102898   \n",
              "1        12.146524     17.914762       78.075406  462.790196         0.092478   \n",
              "\n",
              "       mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
              "class                                                                         \n",
              "0              0.145188        0.160775             0.087990       0.192909   \n",
              "1              0.080085        0.046058             0.025717       0.174186   \n",
              "\n",
              "       mean fractal dimension  ...  worst radius  worst texture  \\\n",
              "class                          ...                                \n",
              "0                    0.062680  ...     21.134811      29.318208   \n",
              "1                    0.062867  ...     13.379801      23.515070   \n",
              "\n",
              "       worst perimeter   worst area  worst smoothness  worst compactness  \\\n",
              "class                                                                      \n",
              "0           141.370330  1422.286321          0.144845           0.374824   \n",
              "1            87.005938   558.899440          0.124959           0.182673   \n",
              "\n",
              "       worst concavity  worst concave points  worst symmetry  \\\n",
              "class                                                          \n",
              "0             0.450606              0.182237        0.323468   \n",
              "1             0.166238              0.074444        0.270246   \n",
              "\n",
              "       worst fractal dimension  \n",
              "class                           \n",
              "0                     0.091530  \n",
              "1                     0.079442  \n",
              "\n",
              "[2 rows x 30 columns]"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.groupby('class').mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W9D5SzkyIaVh"
      },
      "outputs": [],
      "source": [
        "#train test split\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VddYK6u8ApHI"
      },
      "outputs": [],
      "source": [
        "X=data.drop('class',axis=1)\n",
        "Y=data['class']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JHwxBkJ5BpaU"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eNctSi6EB5cv",
        "outputId": "fbe54b8d-c692-44fa-e9a4-329521cb1c89"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(569, 30) (512, 30) (57, 30)\n"
          ]
        }
      ],
      "source": [
        "print(X.shape,X_train.shape,X_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1SBbRHc4CBc_",
        "outputId": "1c367884-e2a3-4173-ed35-0ebbf3f4087b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(569,) (512,) (57,)\n"
          ]
        }
      ],
      "source": [
        "print(Y.shape,Y_train.shape,Y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BaOx-0GCJxj",
        "outputId": "63af2640-a3de-4b7f-b9d3-c7e07a71ab1b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.6274165202108963 0.619140625 0.7017543859649122\n"
          ]
        }
      ],
      "source": [
        "print(Y.mean(), Y_train.mean(), Y_test.mean())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AahIGt3XCawx"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.1,stratify=y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jLnpTEf_M7cf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PF46n6keCwJ_",
        "outputId": "ee6d7466-2e89-446e-c73e-cc7ba1a9ec4f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "mean radius                 14.127292\n",
            "mean texture                19.289649\n",
            "mean perimeter              91.969033\n",
            "mean area                  654.889104\n",
            "mean smoothness              0.096360\n",
            "mean compactness             0.104341\n",
            "mean concavity               0.088799\n",
            "mean concave points          0.048919\n",
            "mean symmetry                0.181162\n",
            "mean fractal dimension       0.062798\n",
            "radius error                 0.405172\n",
            "texture error                1.216853\n",
            "perimeter error              2.866059\n",
            "area error                  40.337079\n",
            "smoothness error             0.007041\n",
            "compactness error            0.025478\n",
            "concavity error              0.031894\n",
            "concave points error         0.011796\n",
            "symmetry error               0.020542\n",
            "fractal dimension error      0.003795\n",
            "worst radius                16.269190\n",
            "worst texture               25.677223\n",
            "worst perimeter            107.261213\n",
            "worst area                 880.583128\n",
            "worst smoothness             0.132369\n",
            "worst compactness            0.254265\n",
            "worst concavity              0.272188\n",
            "worst concave points         0.114606\n",
            "worst symmetry               0.290076\n",
            "worst fractal dimension      0.083946\n",
            "dtype: float64 mean radius                 14.162424\n",
            "mean texture                19.383633\n",
            "mean perimeter              92.202832\n",
            "mean area                  658.439648\n",
            "mean smoothness              0.096269\n",
            "mean compactness             0.104251\n",
            "mean concavity               0.089050\n",
            "mean concave points          0.048894\n",
            "mean symmetry                0.180620\n",
            "mean fractal dimension       0.062720\n",
            "radius error                 0.404707\n",
            "texture error                1.226332\n",
            "perimeter error              2.867891\n",
            "area error                  40.548637\n",
            "smoothness error             0.007073\n",
            "compactness error            0.025624\n",
            "concavity error              0.032062\n",
            "concave points error         0.011770\n",
            "symmetry error               0.020480\n",
            "fractal dimension error      0.003825\n",
            "worst radius                16.315705\n",
            "worst texture               25.877773\n",
            "worst perimeter            107.603379\n",
            "worst area                 886.418750\n",
            "worst smoothness             0.132402\n",
            "worst compactness            0.254469\n",
            "worst concavity              0.273248\n",
            "worst concave points         0.114462\n",
            "worst symmetry               0.289692\n",
            "worst fractal dimension      0.084049\n",
            "dtype: float64 mean radius                 13.811719\n",
            "mean texture                18.445439\n",
            "mean perimeter              89.868947\n",
            "mean area                  622.996491\n",
            "mean smoothness              0.097182\n",
            "mean compactness             0.105150\n",
            "mean concavity               0.086543\n",
            "mean concave points          0.049144\n",
            "mean symmetry                0.186028\n",
            "mean fractal dimension       0.063495\n",
            "radius error                 0.409349\n",
            "texture error                1.131716\n",
            "perimeter error              2.849609\n",
            "area error                  38.436772\n",
            "smoothness error             0.006756\n",
            "compactness error            0.024166\n",
            "concavity error              0.030381\n",
            "concave points error         0.012031\n",
            "symmetry error               0.021106\n",
            "fractal dimension error      0.003521\n",
            "worst radius                15.851368\n",
            "worst texture               23.875789\n",
            "worst perimeter            104.187719\n",
            "worst area                 828.164912\n",
            "worst smoothness             0.132073\n",
            "worst compactness            0.252430\n",
            "worst concavity              0.262669\n",
            "worst concave points         0.115906\n",
            "worst symmetry               0.293525\n",
            "worst fractal dimension      0.083018\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(X.mean(), X_train.mean(), X_test.mean())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_SDz5dH3C-RI"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.1,stratify=y,random_state=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hN-bhSIqDfHt"
      },
      "outputs": [],
      "source": [
        "#binarisation of inputs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "kKgITv9-Riy9",
        "outputId": "bed15a42-05fa-485f-b5e5-b23ef0bf26e6"
      },
      "outputs": [
        {
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'matlplotlib'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-1d666d898a43>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mmatlplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'matlplotlib'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "import matlplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MpXY2a3pRsKv"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt # Correct the module name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "aV8tEY0LRkV1",
        "outputId": "85c3e782-5c98-4dff-e9e2-adaccf90bb81"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(X_train.T,'*')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "ikMAg1BoR1jr"
      },
      "outputs": [],
      "source": [
        "x_binarised_3_train=X_train['mean area'].map(lambda x: 1 if x<1000 else 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "S7f895DvSdnk",
        "outputId": "6aeb78a8-7191-41f1-f4c2-13266a05f825"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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TUe6lJdxbJ4Fr+Xo+0Bw/+C9Mvrelua0dKi1S/mZLvltS5lpDu1v7ohou9NvR9wDYl27se450X0H77fR7cS6NwTPTW/zMt79Lfw+EOu+a1nH2g/evySpvcsfmntDLemP9q5fv15f+cpXeiyfM2eOHnnkEV199dXatWuX1q9fH7HPTTfdpL/+9a8aN26c7rrrrqS+9GwovmcEAAAMrCH5npGhQhgBAGDkSfT5e1h+mgYAAJw4CCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAo1IKI8uXL1dZWZnS09NVUVGhTZs29br90qVLdfrppysjI0Ner1c33XST2traUioYAAAcX5IOI6tWrVJVVZWqq6u1efNmTZ48WdOnT9f+/ftjbv/YY4/p9ttvV3V1tbZt26aHH35Yq1at0r//+7/3u3gAADDyWbZt28nsUFFRobPOOkvLli2TJAUCAXm9Xt144426/fbbe2x/ww03aNu2baqpqQktu/nmm/Xmm29qw4YNMftob29Xe3t76Gefzyev16umpibl5uYmUy4AADDE5/MpLy+vz+fvpF4Z6ejoUG1trSorK4814HCosrJSGzdujLnPOeeco9ra2tCvcj7++GO98MILuvDCC+P2s3jxYuXl5YUeXq83mTIBAMAI4kpm48bGRvn9fhUXF0csLy4u1vbt22Pu861vfUuNjY0699xzZdu2urq6NG/evF5/TbNw4UJVVVWFfg6+MgIAAI4/g/5pmvXr1+vee+/Vgw8+qM2bN+uZZ57RmjVrdM8998Tdx+PxKDc3N+IBAACOT0m9MlJYWCin06mGhoaI5Q0NDSopKYm5z1133aWrrrpK1157rSTpjDPOUEtLi/7t3/5Nd9xxhxwOPl0MAMCJLKkk4Ha7VV5eHvFm1EAgoJqaGk2bNi3mPq2trT0Ch9PplCQl+d5ZAABwHErqlRFJqqqq0pw5czR16lSdffbZWrp0qVpaWjR37lxJ0uzZs1VaWqrFixdLkmbMmKElS5bozDPPVEVFhXbs2KG77rpLM2bMCIUSAABw4ko6jMyaNUsHDhzQokWLVF9frylTpmjt2rWhN7Xu3r074pWQO++8U5Zl6c4779TevXs1evRozZgxQz/+8Y8H7igAAMCIlfT3jJiQ6OeUAQDA8DEo3zMCAAAw0AgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIwijAAAAKMIIwAAwCjCCAAAMIowAgAAjCKMAAAAowgjAADAKMIIAAAwijACAACMIowAAACjCCMAAMAowggAADCKMAIAAIxKKYwsX75cZWVlSk9PV0VFhTZt2tTr9ocOHdL111+vMWPGyOPx6LTTTtMLL7yQUsEAAOD44kp2h1WrVqmqqkorVqxQRUWFli5dqunTp+uDDz5QUVFRj+07Ojr09a9/XUVFRXrqqadUWlqqTz75RPn5+QNRPwAAGOEs27btZHaoqKjQWWedpWXLlkmSAoGAvF6vbrzxRt1+++09tl+xYoXuv/9+bd++XWlpaSkV6fP5lJeXp6amJuXm5qbUBgAAGFqJPn8n9Wuajo4O1dbWqrKy8lgDDocqKyu1cePGmPs8//zzmjZtmq6//noVFxdr0qRJuvfee+X3++P2097eLp/PF/EAAADHp6TCSGNjo/x+v4qLiyOWFxcXq76+PuY+H3/8sZ566in5/X698MILuuuuu/Szn/1MP/rR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QLKam5uVl5cXd/2I+Ns0gUBA+/btU05OTuivCw4En88nr9eruro6/uZNChi/1DF2qWPs+ofxSx1jlzzbttXc3KyxY8fK4Yj/zpAR8cqIw+HQuHHjBq393NxcJlY/MH6pY+xSx9j1D+OXOsYuOb29IhLEG1gBAIBRhBEAAGDUCR1GPB6Pqqur5fF4TJcyIjF+qWPsUsfY9Q/jlzrGbvCMiDewAgCA49cJ/coIAAAwjzACAACMIowAAACjCCMAAMAowggAADBqRHwD60BpbGzUypUrtXHjRtXX10uSSkpKdM455+jqq6/W6NGjDVcIAMCJ54T5aO9f/vIXTZ8+XZmZmaqsrFRxcbEkqaGhQTU1NWptbdW6des0depUw5XieNXV1aX3338/IghPnDhRaWlphivD8Yx5h5HghAkj//iP/6jJkydrxYoVPf7Ynm3bmjdvnt555x1t3LjRUIUjQ319vd58882IG1tFRYVKSkoMVzZ8BQIBLVq0SMuXL1dTU1PEury8PN1www26++67e/0jUic6nlCTx7wbGMy9IWKfINLT0+1t27bFXb9t2zY7PT19CCsaWQ4fPmxfccUVttPptF0ul11UVGQXFRXZLpfLdjqd9pVXXmm3tLSYLnNYuuWWW+zRo0fbK1assHfu3Gm3trbara2t9s6dO+1f//rXdlFRkX3rrbeaLnNY8vv99h133GHn5+fblmVFPPLz8+0777zT9vv9pssclph3/cPcG1onTBgpKyuzH3300bjrH330Ufvkk08euoJGmGuuucY+9dRT7bVr19pdXV2h5V1dXfa6devs0047zb722msNVjh8FRcX22vXro27fu3atXZRUdEQVjRy8ISaOuZd/zD3htYJE0aWLVtmezwe+7vf/a793HPP2W+88Yb9xhtv2M8995z93e9+187IyLCXL19uusxhKz8/337ttdfirt+wYYOdn58/hBWNHJmZmfY777wTd/3WrVvtrKysIaxo5OAJNXXMu/5h7g2tE+bTNNdff70KCwv185//XA8++KD8fr8kyel0qry8XI888oj+9V//1XCVw1cgEJDb7Y673u12KxAIDGFFI8f555+v73//+/rv//5vFRYWRqxrbGzUbbfdpvPPP99MccNcc3Ozxo4dG3f9mDFj1NLSMoQVjRzMu/5h7g2tE+YNrOE6OzvV2NgoSSosLOSN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\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(x_binarised_3_train,'*')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U6PFDSzVShnP"
      },
      "outputs": [],
      "source": [
        "X_binarised_train=X_train.apply(pd.cut,bins=2,labels=[1,0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eFSd4XatTC17"
      },
      "outputs": [],
      "source": [
        "plt.plot(X_binarised_train,'*')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7uIPsAR8TIOq"
      },
      "outputs": [],
      "source": [
        "X_binarised_test=X_test.apply(pd.cut,bins=2,labels=[1,0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r0CUHcuZTaT5"
      },
      "outputs": [],
      "source": [
        "type(X_binarised_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z-lSdAakTgDa"
      },
      "outputs": [],
      "source": [
        "X_binarised_test=X_binarised_test.values\n",
        "X_binarised_train=X_binarised_train.values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CG2PtM11TtW8"
      },
      "outputs": [],
      "source": [
        "type(X_binarised_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0DIa2hYGTyKy"
      },
      "outputs": [],
      "source": [
        "#MP neuron model\n",
        "from random import randint\n",
        "b=3\n",
        "i=randint(0,X_binarised_train.shape[0]-1)\n",
        "print(\"for row\",i)\n",
        "#try to do inference using  mp neuron\n",
        "if(np.sum(X_binarised_train[100,:])>=b):\n",
        "  print(\"MP neuron inference is Malignant\")\n",
        "else:\n",
        "  print(\"P neuron inference is Benign\")\n",
        "\n",
        "if(Y_train[i]==1):\n",
        "  print(\"In relity Malignant\")\n",
        "else:\n",
        "  print(\"In relity Benign\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "atofotc2V59J"
      },
      "outputs": [],
      "source": [
        "b=3\n",
        "Y_pred_train=[]\n",
        "accurate_rows=0\n",
        "for x,y in zip(X_binarised_train,Y_train):\n",
        "  y_pred=int(np.sum(x)>=b)\n",
        "  Y_pred_train.append(y_pred)\n",
        "  accurate_rows+= (y==y_pred)\n",
        "print(accurate_rows,accurate_rows/X_binarised_train.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Wgz9hTKZYGUD"
      },
      "outputs": [],
      "source": [
        "for b in range(X_binarised_train.shape[1]+1):\n",
        "  Y_pred_train=[]\n",
        "  accurate_rows=0\n",
        "  for x,y in zip(X_binarised_train,Y_train):\n",
        "    y_pred=int(np.sum(x)>=b)\n",
        "    Y_pred_train.append(y_pred)\n",
        "    accurate_rows+= (y==y_pred)\n",
        "  print(b, accurate_rows, accurate_rows/X_binarised_train.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q5YbVoviYyW8"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPx65yEXbjbyRVpIMN9I4sX",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}